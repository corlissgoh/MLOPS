{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ce8d0704",
   "metadata": {},
   "source": [
    "# IT2381 Practical Test\n",
    "Done by Admin No: 221225F\n",
    "\n",
    "### Import the necessary libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9d1b6636",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'Beautifulsoup' from 'bs4' (C:\\Users\\User\\anaconda3\\lib\\site-packages\\bs4\\__init__.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mbs4\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Beautifulsoup\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mrequests\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n",
      "\u001b[1;31mImportError\u001b[0m: cannot import name 'Beautifulsoup' from 'bs4' (C:\\Users\\User\\anaconda3\\lib\\site-packages\\bs4\\__init__.py)"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import time\n",
    "\n",
    "from bs4 import BeuatifulSoup\n",
    "from selenium import websdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from selenium.webdriver.common.by import By"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31ebe885",
   "metadata": {},
   "source": [
    "### URL for the webpage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43f312de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Send request to specified URL\n",
    "current_url =get_current_url()\"https://www.bestdenki.com.sg/brands/apple.html?product_list_limit=24\",'Apple')\n",
    "\n",
    "# print URL\n",
    "print(current_url)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fe2e649",
   "metadata": {},
   "source": [
    "### Retrieve Page HTML content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7a586366",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_current_url(url, name, price, original_price, details):\n",
    "\n",
    "    service = Service(executable_path=\"/geckodriver\")\n",
    "    driver = webdriver.Firefox(service=service)\n",
    "    driver.get(url)\n",
    "    time.sleep(3)\n",
    "    driver.find_element(\"xpath\",'//*[@id=\"text-input-what\"]').send_keys(name)\n",
    "    time.sleep(3)\n",
    "    driver.find_element\n",
    "    time.sleep(3)\n",
    "    driver.find_element(\"xpath\",'//*[@id=\"text-input-what\"]').send_keys(price)\n",
    "    time.sleep(3)\n",
    "    driver.find_element(\"xpath\",'//*[@id=\"text-input-what\"]').send_keys(original_price)\n",
    "    time.sleep(3)\n",
    "    driver.find_element(\"xpath\",'//*[@id=\"text-input-what\"]').send_keys(details)\n",
    "\n",
    "    return current_url"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60d43dee",
   "metadata": {},
   "source": [
    "### Parse and Extract HTML content\n",
    "Extract the name, price, old price and specifications of all the products in the page. You are required to handle the empty value and replace it with 'NA' in your output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1a8b285",
   "metadata": {},
   "outputs": [],
   "source": [
    "resp = requests.get(current_url)\n",
    "content = BeautifulSoup(resp.content, 'lxml')\n",
    "\n",
    "print(content)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b02030b6",
   "metadata": {},
   "source": [
    "### Save extracted content\n",
    "Save the extracted data to a CSV without the index. Name the CSV with this format: **AdminNo_brand.csv**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "47880d95",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'scrape_job_details' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m AdminNo_brand \u001b[38;5;241m=\u001b[39m \u001b[43mscrape_job_details\u001b[49m(current_url)\n\u001b[0;32m      2\u001b[0m AdminNo_brand\u001b[38;5;241m.\u001b[39mcsv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mjobs.csv\u001b[39m\u001b[38;5;124m'\u001b[39m,index \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[0;32m      3\u001b[0m AdminNo_brand\u001b[38;5;241m.\u001b[39mhead()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'scrape_job_details' is not defined"
     ]
    }
   ],
   "source": [
    "AdminNo_brand = scrape_job_details(current_url)\n",
    "AdminNo_brand.csv('jobs.csv',index = False)\n",
    "AdminNo_brand.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "765eaa08",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
